{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","e","preventDefault","handleChangeColor","changeButtonColor","TextForm","text","setText","useState","count","setCount","countChar","fword","findWord","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","console","log","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleReverse","strArr","split","reverse","join","handleVoClick","length","charAt","match","handledelete","replaceAll","defaultProps","abtText","Alert","alert","word","lower","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","clr","buttons","querySelectorAll","forEach","button","error","h","eading","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.99ac388a.chunk.js","sourcesContent":["// ===== React's  Fn-based cmpnt  =====\r\nimport React from 'react'  // rfc\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n// ===== Function and Class Components :- =====\r\n\r\n// The simplest way to define a component is \r\n//     to write a  JS fn :-\r\n//\r\n//   function Welcome(props) {\r\n//       return <h1> Hi, {props.name} </h1> ;\r\n//   } \r\n//\r\n// This function is a valid React component because \r\n// it accepts a single “props” (which stands for properties) \r\n// object arg with data and returns a React element. \r\n// We call such components “function components” because \r\n// they are literally JS fn's.\r\n\r\n\r\nexport default function Navbar(props) {\r\n    // returning whole \"nav\" tag (from- App.js)  to Navbar.js\r\n\r\n\r\n    return (\r\n\r\n        <nav className=\r\n            {`navbar navbar-expand-lg navbar-${props.mode} \r\n            bg-${props.mode} `}>\r\n            <div className=\"container-fluid\" >\r\n                {/* <li className=\"navbar-brand\" href=\"/\">\r\n                    {props.title} */}\r\n                    {/* Since it is a JS file..\r\n                        write inside Curly Bracketts */}\r\n                {/* </li> */}\r\n                <a className=\"navbar-brand\" href=\"#\">\r\n                    {props.title}\r\n                    {/* Since it is a JS file..\r\n                        write inside Curly Bracketts */}\r\n                </a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">\r\n                                {props.abtText}\r\n                            </Link>\r\n                        </li> */}\r\n                    </ul>\r\n\r\n\r\n\r\n                    {/* <div class={`form-check form-switch text-light`} >\r\n                        <input className=\"form-check-input\"  type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n                                Enable DarkMode </label>\r\n                        </div> \r\n                    */}\r\n\r\n                    {/* When will \"toggleMode\" Fn will run ??????\r\n                        when any user clicks on this switch */}\r\n\r\n                    {/* <div class={`form-check form-switch text-light`} >\r\n                        <input className=\"form-check-input\" \r\n                        onClick= {props.toggleMode} \r\n\r\n                        type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n                            Enable DarkMode\r\n                        </label>\r\n                    </div> */}\r\n\r\n\r\n                    {/* I won't let this class to be as text-light\r\n                        as it will be dependent on 'Mode'   */}\r\n                    {/* make it a temp literal first like this `{}`   */}\r\n\r\n                    {/* mode= dark, text= light and vice versa */}\r\n\r\n                    {/* Didn't worked, So use ternary operator */}\r\n                    {/* <div class= {` form-check form-switch \r\n                            text - ${props.mode} `} >\r\n                        <input className=\"form-check-input\" \r\n                        onClick= {props.toggleMode} \r\n\r\n                        type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n                            Enable DarkMode</label>\r\n                        </div> \r\n                    */}\r\n\r\n\r\n                    {/* Used curly braces - JS\r\n                        then use template literal - ``..so it became a \"str\"\r\n                        Whenever i use back tick, then only\r\n                    I   can use \"dollar\"\" to call any var \r\n                        by using '$' or 'curly braces'..\r\n                        \r\n                        and 'Ternary Operator' inside this var \r\n                        which says if mode === light, \r\n                        then text shld become dark  \r\n                        and vice versa..  */}\r\n                    <div className={`form-check form-switch \r\n                    text-${props.mode === 'light' ? 'dark' : 'light'} `} >\r\n                        <input className=\"form-check-input\"\r\n                            onClick={props.toggleMode}\r\n                            type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"\r\n                        />\r\n\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n                            Enable DarkMode\r\n                        </label>\r\n                    </div>\r\n                    <br />\r\n\r\n\r\n                    <div className=\"dropdown ms-3\" id=\"liveAlertPlaceholder\">\r\n                        <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                            Dropdown button\r\n                        </button>\r\n                        <ul className=\"dropdown-menu\">\r\n\r\n                            {/* <li><a className=\"dropdown-item\"\r\n                                id=\"liveAlertBtn\" href=\"/\" onClick={props.changegreen} >changeGreen</a></li>\r\n                            <li><a className=\"dropdown-item\"\r\n                                id=\"liveAlertBtn\" href=\"/\" onClick={props.changered}>changeRed</a></li>\r\n                            <li><a className=\"dropdown-item\"\r\n                                id=\"liveAlertBtn\" href=\"/\" onClick={props.changeyellow} >changeYellow</a></li> */}\r\n\r\n\r\n\r\n                            {/*                             \r\n                            <li><a className=\"dropdown-item\" onClick={() => handleChangeColor('green')}>changeGreen</a></li>\r\n                            <li><a className=\"dropdown-item\" onClick={() => handleChangeColor('red')}>changeRed</a></li>\r\n                            <li><a className=\"dropdown-item\" onClick={() => handleChangeColor('yellow')}>changeYellow</a></li>  */}\r\n\r\n\r\n\r\n                            {/* \r\n                            <li><a className=\"dropdown-item\" href=\"/\"\r\n                                onClick={() => props.handleChangeColor('#3cb541')} >changeGreen</a></li>\r\n                            <li><a className=\"dropdown-item\" href=\"/\"\r\n                                onClick={() => props.handleChangeColor('#ac242f')} >changeRed</a></li>\r\n                            <li><a className=\"dropdown-item\" href=\"/\"\r\n                                onClick={() => props.handleChangeColor('#CAB911')} >changeYellow</a></li> */}\r\n\r\n\r\n\r\n                            {/* ==== Correct Code below - 1  ==== */}\r\n\r\n\r\n                            <li>\r\n                                {/* I see that you have updated the Navbar.js code to include \r\n                            the href=\"/\", which caused the links to reload the page \r\n                                when you click on them, making the alerts \r\n                                disappear quickly. \r\n                            To fix this, you can prevent the default behavior \r\n                                of the links by using the preventDefault method \r\n                                on the event(e) obj in the onClick handlers. */}\r\n                                <a className=\"dropdown-item\" href='/'\r\n                                    onClick={(e) => {\r\n                                        e.preventDefault();\r\n                                        props.handleChangeColor('#3cb541')\r\n                                        props.changeButtonColor('#008B8B')\r\n                                    }} >\r\n                                    changeGreen\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"dropdown-item\" href='/'\r\n                                    onClick={(e) => {\r\n                                        e.preventDefault();\r\n                                        props.handleChangeColor('#ac242f')\r\n                                        props.changeButtonColor('#fd5c69')\r\n                                    }} >\r\n                                    changeRed\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"dropdown-item\" href='/'\r\n                                    onClick={(e) => {\r\n                                        e.preventDefault();\r\n                                        props.handleChangeColor('#999900')\r\n                                        props.changeButtonColor('#FEBE10')\r\n                                    }} >\r\n                                    changeYellow\r\n                                </a>\r\n                            </li>\r\n\r\n\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n// Props -  It accepts a single “props” (which stands for \r\n//          properties) object argument with data \r\n//          and returns a React element..\r\n//   We call such components “Fn components” \r\n//      bcoz they are literally JS Fn's..\r\n//\r\n// In simple terms, Props is a type of object where the \r\n//     value of attributes  of a tag is stored..\r\n// The word “props” implies “properties”, and it's \r\n///    working functionality is quite similar to HTML attributes..\r\n\r\n\r\n\r\n\r\n// Navbar.propTypes = {\r\n//     title: PropTypes.string, \r\n//     abtText: PropTypes.string\r\n// }\r\n\r\n\r\n// Don't send props after doing this.\r\n//     means- when we said \"isRequired\" and\r\n//     we didn't send props inside <Navabar/> \r\n//     then we get an error..\r\n// Also, remove \"defaultprops\" to see Error..\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    abtText: PropTypes.string.isRequired\r\n}\r\n//// O/P:- Failed prop type: The prop `title` is marked\r\n////       required in `Navbar`, but it's val is `undefined`.\r\n////       at Navbar..\r\n\r\n\r\n// If props are not passed, then use these values..\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    abtText: 'About'\r\n};\r\n","//=====  useState is a Hook  =====\r\n// Hooks - Let u use state and other React features\r\n//         without writing a class.\r\nimport React, { useState } from 'react';\r\n\r\n    // function  Example() {\r\n    //   // Declare a new state variable,\r\n    //   //    which we'll call \"count\"\r\n    //   const [count, setCount] = useState(0);\r\n    \r\n    // return (\r\n    //   <div> <p> You clicked {count} times </p>\r\n    //     <button onClick= { () => setCount(count + 1)} >\r\n    //       Click me\r\n    //     </button>\r\n    //   </div>\r\n    // );\r\n    // }s\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n\r\n    const handleUpClick = () => {\r\n        console.log(\"Uppercase was clicked\" + text);\r\n        // setText(\"You have clicked on handleUpClick\")\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        // setText(\"new Text\"); // To change text.. \r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        console.log(\" Lowercase was clicked\" + text);\r\n        // setText(\"You have clicked on handleUpClick\")\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        // setText(\"new Text\"); // To change text.. \r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n\r\n    // Whenever you're listening sum for any Event \r\n    //    like we are listening on onChange event..\r\n    // At that time, Fn will run as when i make some changes\r\n    //    and  We will get  1 \"free Event Obj\"..\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n        // setInput(e.target.value); \r\n        //\r\n        //// Suppose, user writes \"T\", then \r\n        ////   at the moment the value will be, \r\n        ////  the \"text we had\" +  \"T\"  \r\n        //// then, we will be able to type in textArea now..\r\n    }\r\n\r\n\r\n    // const handleTitle = () => {\r\n    //     console.log(\" Lowercase was clicked\" + text);\r\n    //     // setText(\"You have clicked on handleUpClick\")\r\n    //     let newText = text.toLowerCase();\r\n    //     setText(newText);\r\n    //     // setText(\"new Text\"); // To change text.. \r\n    // }\r\n\r\n\r\n    // const toTitleCase = ( ) => {\r\n    //     return text.replace( /\\w\\S*/g,\r\n    //         function(text) {\r\n    //           return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase();\r\n    //         }\r\n    //     );\r\n    // }\r\n\r\n    const handleReverse = () => {\r\n        /* Convert string to array*/\r\n        let strArr = text.split(\"\");\r\n        /* Reverse array*/\r\n        strArr = strArr.reverse();\r\n        /* Convert array to string*/\r\n        let newText = strArr.join(\"\");\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Reverse\", \"success\");\r\n    };\r\n\r\n\r\n    // =====  Vowels  =====\r\n    const handleVoClick = () => {\r\n        for( count = 0; count <= text.length; count++ ) {\r\n            if(text.charAt(count).match(/[aeiouAEIOU]/) ) \r\n            // '/[aeiouAEIOU]/': \r\n            // This is the regular expression pattern.\r\n            // It checks if any char in the string(text \r\n            // in your case) matches any char in the \r\n            // set of vowels.\r\n            {\r\n                countChar++;\r\n                setCount(countChar);\r\n            }\r\n        }\r\n        // console.log(\"No of Vowels are: \" + countChar);\r\n        props.showAlert(\"Vowels are counted\", \"success\");\r\n    };\r\n\r\n\r\n\r\n    const handleFind = (event) => {\r\n        console.log(\"change hua\");\r\n        findWord(event.target.value)\r\n    }\r\n\r\n    const handledelete = () => {\r\n        let newText = text.replaceAll(fword, \"\");\r\n        setText(newText);\r\n    }\r\n\r\n    // Program to count the no of vowels in a Str.\r\n\r\n    // CORRECT, But not able to complete it with \r\n    //        all code in this js file..\r\n    \r\n    // function countVowel() {\r\n    //   let counter = 0;\r\n    //   const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\r\n\r\n    //   for (let letter of text.toLowerCase()) {\r\n    //     if (vowels.includes(letter)) {\r\n    //       counter++;\r\n    //     }\r\n    //   }\r\n    //// console.log(`The text contains ${counter} vowel(s)`);\r\n    //   return counter;\r\n    // }\r\n   \r\n\r\n\r\n\r\n\r\n    // Always add this inside Fn component.\r\n    // Destructing Array/ Obj / Params..concept is used \r\n    //      here  to make varibles..    \r\n    // \r\n    const [text, setText] = useState('');\r\n    // const [text, setText] = useState(''); \r\n    // defaut val is \"blank\".\r\n    //\r\n    // Inside text variable \"enter text here2\" value\r\n    //    shld come and whenever \r\n    //    we update this text, we will \r\n    //    do it through \"setText\" Fn\r\n    //\r\n    // text = \"new text\";   // Wrong   way to chg state\r\n    // setText(\"new text\"); // Correct way to chg state..\r\n\r\n\r\n\r\n    // =====  Only for Counting Vowels  =====\r\n    let [count, setCount] = useState(0);\r\n    let countChar = 0;\r\n\r\n\r\n\r\n    // IMP-ortant..\r\n    // Use this, whenever we use \"onChange Fn\" in textArea..\r\n    const [fword, findWord] = useState(\"\");\r\n    // default value of fword is blank.\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className= 'container' \r\n                //  want to make the textColor as 'White'\r\n                style= { { \r\n                color: props.mode === 'dark'? 'white': 'black' \r\n                } }\r\n            >\r\n                <h1> {props.heading} </h1>\r\n                <div className=\"mb-2 \">\r\n                 {/* Textarea ki jo val hai, \r\n                    wo whi hojayegi jo text ki hai \r\n                    & default val of text is \"enter text here2\" */}\r\n\r\n                 {/* Whenever we listen to an Event in React\r\n                    then that fn will run, whenever we change sthg..\r\n                    And also, we will get 1 \"free Event Obj\" */}\r\n\r\n                    <textarea className=\"form-control\" id=\"myBox\"\r\n                        value = {text}  onChange = {handleOnChange}                     \r\n                        // style{{}}\r\n                        // 1st {} - JS\r\n                        // 2nd {} - To write an Obj in JS\r\n                        //\r\n                        // textArea bg will be grey color and \r\n                        // text inside it will be white color..\r\n                      style={ { \r\n                    backgroundColor:props.mode === 'dark'? 'grey': 'white' ,\r\n                      // color is for text color \r\n                    color: props.mode === 'dark'? 'white': 'black'}} \r\n                        rows=\"6\">\r\n\r\n                        {/* we are using \"Val\"  as State variable and \r\n                          it is necessary to update that State whenever \r\n                          someone type's inside that State area..    */}\r\n\r\n                        {/* if we hadn't done \"OnChange\" fn, \r\n                            we won't be able to type in form..\r\n                            So, it is necessary to do it..      */}\r\n                    </textarea>\r\n                </div>\r\n\r\n                <button className=\"btn btn-info mx-2\" id=\"btn\"\r\n                   onClick={handleUpClick}> \r\n                   Convert to Uppercase\r\n                </button>\r\n\r\n                <button className=\"btn btn-info mx-2\"  id=\"btn\"\r\n                   onClick={handleLoClick} >\r\n                    Convert to Lowercase\r\n                </button>\r\n                {/* <button className=\"btn btn-info mx-2\" \r\n                    onClick={toTitleCase} >\r\n                    Title Case \r\n                </button>   */}\r\n\r\n\r\n                <button className=\"btn btn-info mx-2\"  id=\"btn\"\r\n                    onClick={handleReverse} >\r\n                    Handle Reverse\r\n                </button>\r\n\r\n                {/* <button className=\"btn btn-info mx-2\" \r\n                    onClick={countVowel} >\r\n                    Count Vowel \r\n                </button>    */}\r\n\r\n\r\n                <button className=\"btn btn-info mx-2 my-2\" id=\"btn\" \r\n                    onClick = {handleVoClick}> Count Vowels \r\n                </button>\r\n\r\n\r\n                <div className=\" mt-2 mb-2\">\r\n                    <textarea className=\"form-control\" \r\n                        value = {fword} id=\"myBox\" \r\n                        onChange = {handleFind}  \r\n                        rows=\"1\"> \r\n                    </textarea>  \r\n                </div>  \r\n                <button className=\"btn btn-info mx-2\" id=\"btn\"\r\n                onClick = {handledelete}> delete specific word </button>   \r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            {/*======  PlayList 7 starts from here  ======  */}\r\n            \r\n            {/* ====== making a Word Counter ====== */}\r\n\r\n            <div className=\"container my-2\" \r\n               style = { { \r\n                color: props.mode=== 'dark'? 'white': 'black'}}>\r\n                \r\n                <h2>Your text Summary</h2>\r\n\r\n                {/* <p> 3432 words, 4577789 characters</p> */} \r\n\r\n                {/* <p> 3432 words, {text.length} characters</p> */}\r\n                {/* ENTER THE TEXT = 14 CHAR's */}\r\n                \r\n\r\n\r\n                {/*   */}\r\n                {/*<p> {text.split(\" \") } , {text.length} characters </p>\r\n                 { text.split(\" \")  } --> will give an array\r\n                    and which will hv words */}\r\n\r\n                {/* <p>{text.split(\" \").length} words, {text.length} characters</p> */}\r\n                {/* and length of it will be \"no. of words\" */}\r\n\r\n                {/* <p>{ text.split(/\\s+/)\r\n                .filter(word => word.trim() !== '').length} words, \r\n                {text.length} characters\r\n                </p> */}\r\n\r\n                <p>{text.split(\" \").length > 1 ? text.split(\" \").length - 1 : 0} words, {text.length} characters</p>\r\n\r\n\r\n\r\n\r\n                {/* ==== Time to read 1 word in internet ==== */}\r\n                {/* 125 words - 1 min....1 word = 1/125 = 0.008 */}\r\n                {/* so, If I multiply 0.008 with no of words */}\r\n                {/* then In How many minutes one can read it, will come */}\r\n                <p> {0.008 * text.split(\" \").length} Minutes read </p>\r\n                {/* we can tell user, How much time it'll take to read it */}\r\n                <h2> Preview </h2>\r\n                {/* <p> {this.text} </p> */}\r\n                {/* Cannot do this since it is NOT a class-based cmpnt.. */}\r\n                {/* <p> {text} </p> */}\r\n                {/* If text is empty, then preview- \r\n                    Enter sthg to preview it here */}\r\n                \r\n                <p>{text.length > 0 ? text : \"Enter sthg to preview it here\"} </p>\r\n\r\n                <p> {count} no. of vowels</p>\r\n\r\n\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n// ======  rfce  ======  \r\nfunction Alert(props) {\r\n\r\n    // There  is no capitalize fn in JS..\r\n    const capitalize = (word) => {\r\n        // there is no capitalize fn in JS..so, do these instead.\r\n        const lower = word.toLowerCase();\r\n        // return str.charAt(0) - \r\n        //      string at 0 position..\r\n        //\r\n        // lower.charAt(0).toUpperCase() - \r\n        //     Convert 1st char to UpperCase..\r\n        // \r\n        // lower.slice(1) - \r\n        //  It'll take all char Except 1st char.. \r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        // <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n        //  bcoz alert was initially set as 'Null'\r\n\r\n        \r\n        // props.alert - NUll     , then we won't get anything\r\n        // props.alert - Not Null , then we will  get WHOLE div value..\r\n\r\n        // props.alert && <div className=\"alert alert-warning alert-dismissible fade show\"  role=\"alert\">\r\n        //\r\n        // whenver u use \"&&\" in JS...then first n foremost\r\n        //     this \"props.alert\" will evaluate\r\n        //     and if that becomes FALSE or Null, \r\n        //     then thing ahead of it, won't evaluate..\r\n        // AND if it becomes TRUE, then other thing will also\r\n        //     be evaluated..\r\n        \r\n        // This happens bcoz all the JSX\r\n        //      will be converted to JS Calls..\r\n        // This  \" {`alert alert-${props.alert.type`} \"  \r\n        //    will show the alert msg in green ( Success )..  \r\n        \r\n        props.alert && <div className ={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n\r\n\r\n            {/* Bcoz anyways we are dis-missing Alert after every 2 sec\r\n            so, no need to give user a way to dismiss this */}\r\n    \r\n            {/* <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n            </button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\n// import React, { useEffect, useState } from 'react';\nimport React, { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import edit from './img/edit.png';\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\n\n\n\n\nfunction App(props) {\n\n  //==== Whether Dark mode is enabled or not  ====\n  const [mode, setMode] = useState('light'); \n\n  const toggleMode = () =>  {\n    \n    if( mode === 'light') {\n      setMode('dark'); // setMode is a Fn...So, call it like this.\n      // setMode = 'dark'; // And NOT like this..\n      document.body.style.backgroundColor = '#373F51';\n      // document.body.style.textColor =\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n    }\n    else {\n      setMode('light');\n      // setMode = 'light';\n      document.body.style.backgroundColor = '#dee6ec';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n   \n  } \n  \n\n\n  \n  const [alert, setAlert] = useState(null);\n  // \"alert\" is an obj..and It is by default \"null\"\n  // set Alert is there to change 'alert'..\n  //\n  // 'showAlert' is a Fn which will \n  //    enable us to show alert messages..\n  // === Types ====\n  // 1. Primary (  Blue    )\n  // 2. Success (  Green   ) \n  // 3. Warning (  Yellow  )\n  // 4. Danger  (  Blue    )\n\n  const showAlert = (message, type) => {\n    setAlert( {\n      // both message & msg are same\n      // for understanding, we hv made them diff..\n      msg: message, \n      type: type\n    })\n    // Alert banner will vanish after 1.5 sec..\n    setTimeout( () => {\n        setAlert(null);\n    }, 1500 ) ;\n  }\n\n  // const [backgroundColor, setBackgroundColor] = useState('light');\n  // \n  // const handleChangeColor = (color) => {\n  //   setBackgroundColor(color);\n  //   window.alert(`Background is changed to ${color}`);\n  // };\n\n\n  // const handleChangeColor = (color) => {\n  //   setMode('light'); // Set mode to 'light' to avoid conflicts with dark mode.\n  //   showAlert(`Background is changed to ${color}`, 'success');\n  //   document.body.style.backgroundColor = color;\n  // };\n\n\n  const handleChangeColor = (color) => {\n\n    document.body.style.backgroundColor = color;\n    showAlert(`Background color changed to ${color}`, 'success');\n\n    // Clear the 'alert' after  1.5 s\n    setTimeout(() => {\n        setAlert(null);\n    }, 1500);\n  \n  };\n\n  \n  const changeButtonColor = (clr) => {\n    // Assuming your buttons have a common class, \n    //  replace 'your-button-class' with the actual class of your buttons\n    const buttons = document.querySelectorAll('.btn'); // replace 'your-button-class' with the actual class of your buttons\n\n\n    if (buttons.length > 0) {\n\n        buttons.forEach( (button) => {\n          button.style.backgroundColor = clr;\n        });\n        // showAlert(`Button color changed to ${clr}`, 'success');\n        setTimeout( () => {\n            setAlert(null);\n        }, 1500);\n    } \n    else {\n        console.error('No buttons found with the specified class');\n    }\n  }\n\n\n\n  ////======  Correct code Below  ======\n  //\n  // const changegreen = () => {\n  //   document.body.style.backgroundColor = '#3cb541'\n  //   // document.getElementById(\"button\").bgcolor='#3cb541'\n  //   // document.getElementById(\"surmenu\").style.backgroundColor='#3cb541';\n  //   // setColor(color)\n  //   // props.showAlert('\"bakcgroun is changed to Green\" ,  \"success\"');\n  // }\n  // const changered = () => {\n  //   document.body.style.backgroundColor = '#ac242f'\n  //   // props.showAlert(' \"bakcgroun is changed to Red\" , \"success\"');\n  // }\n  // const changeyellow = () => {\n  //   document.body.style.backgroundColor = '#CAB911'\n  //   // props.showAlert(' \"bakcgroun is changed to Yellow\" , \"success\"');\n  // }\n\n  \n\n  // const greenbtn = ( ) => {\n  //   // document.getElementById(\"button\").style.background='#3cb541';\n  //   document.getElementById(\"button\").bgcolor='';\n  // }\n  // useEffect( () => {\n  //   document.body.style.backgroundColor = color\n  // }, [color])\n  \n  // const changegreenbtn = ( ) => {\n  //  document.body.style.button= '#3cb541'\n  // }\n\n\n\n\n\n  return (\n    <>\n    {/* <BrowserRouter> */}\n          {/* only these 2 value can be changed (from Navbar.js) \n        acc to our needs.. */}\n      {/* <Navbar title= \"Textutils\" abtText= \"About Us\"/>   */}\n      \n      {/* Importing navbar ->  \"<Navbar/>\"    */}\n\n      {/* <Navbar title=\"Textutils\" mode={mode} toggleMode={} /> */}\n\n\n      {/* ===== Correct Code below - 1  ===== */}\n\n      {/* <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} \n        changegreen={changegreen} changered={changered}\n        changeyellow={changeyellow}   /> */}\n      \n      <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} \n        handleChangeColor={handleChangeColor}  \n        changeButtonColor= {changeButtonColor}\n      />\n        {/* this \"changeBackgroundColor={changeBackgroundColor}\" means \n        Pass the Fn as a prop to Navbar    */}\n     \n\n      {/* <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} \n          handleChangeColor={handleChangeColor} />   */}\n\n\n\n      {/* {alert}- This is our alert state */}\n      <Alert alert = {alert} />\n\n      {/* <div className=\"App\">\n        <div className=\"menu-container\">\n          <div className=\"menu-trigger\">\n            <img src='' /> <img />\n          </div>\n\n          <div className=\"dropdown-menu\">\n            <h3>The web</h3>\n            <ul>\n              <DropdownItem/>\n              <DropdownItem/>\n              <DropdownItem/>\n            </ul>\n          </div>\n\n        </div>\n      </div> */}\n      \n      <div className = \"container my-3\">\n        {/* <TextForm  heading=\"Enter the text to analyze\" \n          mode={mode}/> */}\n        {/* passing showAlert here for all buttons\n        so, whenever they r clicked, alert will Pop Up   */}\n        {/* <TextForm showAlert = {showAlert} \n          heading=\"Enter the text to analyze\" \n          mode={mode}/> */}\n         <TextForm showAlert = {showAlert} \n                  h eading=\"Enter the text to analyze\" \n                  mode={mode}\n          />\n          \n        {/*   <About/>    */}\n\n      </div>\n\n      <div className=\"container my-4\" mode={mode}>\n          \n          {/* <Routes>\n            <Route */}\n            {/*  /users --> Components 1\n             /users/home --> Components 2  \n             React uses partial matching\n             So, use \"exact\" in path..\n              // exact path=\"/\"\n              // element = {} */}\n                {/* <TextForm showAlert = {showAlert} \n                  h eading=\"Enter the text to analyze\" \n                  mode={mode}\n                /> */}\n              \n            {/* ></Route> */}\n            {/* <Route exact path=\"/about\" element={<About/>}></Route> */}\n            \n          {/* </Routes> */}\n        </div>\n\n    {/* </BrowserRouter>       */}\n    </>\n  );\n\n  // we hv used parenthesis bcoz \n  //    JS can automatically insert ';' and\n  //    It can ruin our JSX..\n  // create react hv already made us a __?__ \n}\n\n// function DropdownItem() {\n//   return(\n//\n//     <li  className=''>\n//       {/* <img> </img > */}\n//       <a></a>\n//     </li>\n//\n//   );\n// }\n\n\n// let name = \"Tarun\";\n// {/* <nav>\n//   <li>Home</li>\n//   <li>About</li>\n//   <li>Gallery</li>\n// </nav>\n// <div className=\"container\">\n//   <h1> Hello {name}</h1>\n//   <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Maxime dignissimos, sint placeat ipsa, reiciendis cupiditate ut magni laudantium esse soluta libero ex quo natus ad temporibus eaque facere, quos at!</p>\n//  </div> */}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Entry Point..\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n  <React.StrictMode>\n    <App />  \n    {/* index.js is saying to render app component,, then take it to root */}\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}